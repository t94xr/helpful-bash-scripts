#!/bin/bash

set -e

# Other functions (e.g., cleanup_on_error, show_help, etc.) remain the same

FS_TYPE="ext4"
LABEL=""
READONLY=false
AUTOMOUNT=false
NO_MOUNT=false  # New variable for the --nomount flag

while [[ "$1" == --* ]]; do
    case "$1" in
        --help)
            show_help
            exit 0
            ;;
        --umount)
            # Umount logic
            ;;
        --resize)
            # Resize logic
            ;;
        --convertiso)
            # Convert ISO logic
            ;;
        --fs)
            FS_TYPE="$2"
            shift 2
            ;;
        --label)
            LABEL="$2"
            shift 2
            ;;
        --readonly)
            READONLY=true
            shift
            ;;
        --auto-mount)
            AUTOMOUNT=true
            shift
            ;;
        --nomount)  # Check for --nomount flag
            NO_MOUNT=true
            shift
            ;;
        *)
            echo "Unknown flag: $1"
            show_help
            exit 1
            ;;
    esac
done

# Check that the size and image file arguments are provided
SIZE="$1"
IMAGE_FILE="$2"

if [[ -z "$SIZE" || -z "$IMAGE_FILE" || ( -z "$3" && "$NO_MOUNT" == false ) ]]; then
    echo "Error: Missing arguments."
    show_help
    exit 1
fi

# If --nomount flag is not set, ensure the mount point exists
if [[ "$NO_MOUNT" == false && ! -d "$3" ]]; then
    MOUNT_POINT="$3"
    echo "Creating mount point at $MOUNT_POINT"
    sudo mkdir -p "$MOUNT_POINT"
else
    MOUNT_POINT=""
fi

# If the image is already mounted, show the message and exit
if mount | grep -q "$IMAGE_FILE" && [[ "$NO_MOUNT" == false ]]; then
    echo "Image $IMAGE_FILE is already mounted:"
    mount | grep "$IMAGE_FILE"
    exit 0
fi

# If the image doesn't exist, create it and format
if [ ! -f "$IMAGE_FILE" ]; then
    echo "Creating virtual disk image at $IMAGE_FILE with size $SIZE..."
    sudo dd if=/dev/zero of="$IMAGE_FILE" bs=1 count=0 seek="$SIZE"
    echo "Formatting with $FS_TYPE..."
    case "$FS_TYPE" in
        ext4|ext3|ext2|xfs|btrfs|jfs)
            CMD="sudo mkfs.$FS_TYPE"
            [[ -n "$LABEL" ]] && CMD+=" -L \"$LABEL\""
            eval "$CMD \"$IMAGE_FILE\""
            ;;
        fat32|fat16)
            if ! command -v mkfs.vfat &> /dev/null; then
                echo "Error: FAT formatting requires 'dosfstools'."
                echo "Please install it using: sudo apt install dosfstools"
                exit 1
            fi
            CMD="sudo mkfs.vfat -F 32"
            [[ -n "$LABEL" ]] && CMD+=" -n \"$LABEL\""
            eval "$CMD \"$IMAGE_FILE\""
            ;;
        ntfs)
            if command -v mkfs.ntfs &> /dev/null; then
                CMD="sudo mkfs.ntfs"
            elif command -v mkntfs &> /dev/null; then
                CMD="sudo mkntfs"
            else
                echo "Error: NTFS formatting requires 'ntfs-3g' and a usable 'mkfs.ntfs' or 'mkntfs'."
                echo "Please install it using: sudo apt install ntfs-3g"
                exit 1
            fi
            [[ -n "$LABEL" ]] && CMD+=" -L \"$LABEL\""
            CMD+=" -F"
            eval "$CMD \"$IMAGE_FILE\""
            ;;
        *)
            echo "Unsupported filesystem: $FS_TYPE"
            exit 1
            ;;
    esac
else
    echo "Image file $IMAGE_FILE already exists."
fi

# Skip mounting if --nomount flag is set
if [[ "$NO_MOUNT" == false ]]; then
    MOUNT_OPTIONS="loop"
    $READONLY && MOUNT_OPTIONS+="\,ro"

    echo "Mounting $IMAGE_FILE to $MOUNT_POINT..."
    sudo mount -o "$MOUNT_OPTIONS" "$IMAGE_FILE" "$MOUNT_POINT"
    echo "Mounted successfully."

    if $AUTOMOUNT; then
        FSTAB_ENTRY="$IMAGE_FILE $MOUNT_POINT $FS_TYPE loop"
        $READONLY && FSTAB_ENTRY+="\,ro"
        FSTAB_ENTRY+=" 0 0"

        if ! grep -qs "$IMAGE_FILE" /etc/fstab; then
            echo "Adding auto-mount entry to /etc/fstab..."
            echo "$FSTAB_ENTRY" | sudo tee -a /etc/fstab > /dev/null
        else
            echo "An entry for $IMAGE_FILE already exists in /etc/fstab. Skipping."
        fi
    fi
else
    echo "Drive formatted successfully without mounting."
fi
