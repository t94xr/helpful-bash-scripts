#!/bin/bash

# --------- HELP MENU ----------
show_help() {
    cat << EOF
Usage: ${0##*/} [OPTIONS] [FILES...]

Generate and verify checksums (md5, sha1, sha256, crc32) for files in the current directory.

OPTIONS:
  --check           Verify existing checksum files (default uses chksum.md5.t)
  --update          Update checksum for specified file(s)
  --all             Enable all hash types (md5, sha1, sha256, crc32)
  --alltypes        Include all file types in current directory (not just *.iso)
  --sha1            Use only SHA1 checksums
  --sha256          Use only SHA256 checksums
  --crc32           Use only CRC32 checksums
  --log             Log results to log.t
  --summary         Show pass/fail summary after verification
  --help            Show this help message and exit

EXAMPLES:
  Generate checksums (default md5) in current directory:
    ${0##*/}

  Generate all checksum types for all files:
    ${0##*/} --all --alltypes

  Verify files and show summary:
    ${0##*/} --check --summary

  Update hash entry for one file in all checksum files:
    ${0##*/} --all --update "Zorin OS 16.3.iso"

REQUIREMENTS:
  md5sum, sha1sum, sha256sum, crc32 must be installed on your system.
EOF
    exit 0
}

# --------- CHECK FOR REQUIRED TOOLS ----------
check_package() {
    command -v "$1" &>/dev/null
}

install_instructions() {
    echo "Required package '$1' is missing."
    if [[ -f /etc/debian_version ]]; then
        echo "For Debian/Ubuntu: sudo apt install $1"
    elif [[ -f /etc/fedora-release ]]; then
        echo "For Fedora: sudo dnf install $1"
    elif [[ "$(uname)" == "Darwin" ]]; then
        echo "For macOS: brew install $1"
    else
        echo "Unknown system. Install $1 manually."
    fi
}

REQUIRED_TOOLS=("md5sum" "sha1sum" "sha256sum" "crc32")
for tool in "${REQUIRED_TOOLS[@]}"; do
    if ! check_package "$tool"; then
        install_instructions "$tool"
        exit 1
    fi
done

# --------- FLAGS & CONFIG ----------
CHECK_MODE=false
ALL_MODES=false
ALLTYPES_MODE=false
UPDATE_MODE=false
LOG_MODE=false
SUMMARY_MODE=false
HASH_TYPES=("md5")
LOG_FILE="log.t"

declare -A HASH_CMDS=(
  ["md5"]="md5sum"
  ["sha1"]="sha1sum"
  ["sha256"]="sha256sum"
  ["crc32"]="crc32"
)

# --------- COLORS & LOGGING ----------
color_pass() { echo -e "\033[1;32m$1\033[0m"; }
color_fail() { echo -e "\033[1;31m$1\033[0m"; }

log_msg() {
    $LOG_MODE && echo "$1" >> "$LOG_FILE"
}

# --------- ARGUMENT PARSING ----------
for arg in "$@"; do
    case "$arg" in
        --help) show_help ;;
        --check) CHECK_MODE=true ;;
        --sha1) HASH_TYPES=("sha1") ;;
        --sha256) HASH_TYPES=("sha256") ;;
        --crc32) HASH_TYPES=("crc32") ;;
        --all) ALL_MODES=true ;;
        --alltypes) ALLTYPES_MODE=true ;;
        --update) UPDATE_MODE=true ;;
        --log) LOG_MODE=true ;;
        --summary) SUMMARY_MODE=true ;;
    esac
done

$ALL_MODES && HASH_TYPES=("md5" "sha1" "sha256" "crc32")

# --------- FILE COLLECTION ----------
get_files() {
    if $ALLTYPES_MODE; then
        find . -maxdepth 1 -type f ! -name "chksum.*.t" ! -name "log.t" ! -name "${0##*/}" -printf "%f\n"
    else
        find . -maxdepth 1 -name "*.iso" -printf "%f\n"
    fi
}

file_list=()
if ! $CHECK_MODE && ! [[ "$*" == *"--help"* ]]; then
    mapfile -t file_list < <(get_files)
    if [[ ${#file_list[@]} -eq 0 ]]; then
        echo "⚠ No target files found in the current directory."
        show_help
    fi
fi

# --------- MAIN LOGIC ----------
cd . || { echo "Failed to access current directory"; exit 1; }

for hash in "${HASH_TYPES[@]}"; do
    FILE="chksum.$hash.t"
    CMD="${HASH_CMDS[$hash]}"

    if $CHECK_MODE; then
        [[ ! -f "$FILE" ]] && { echo "❌ No $FILE found."; log_msg "No $FILE found."; continue; }

        echo "🔍 Verifying with $FILE"
        log_msg "Verifying with $FILE"

        pass_count=0
        fail_count=0

        while IFS= read -r line; do
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue

            file="${line#*  }"
            echo "$line" | $CMD -c - &>/dev/null
            if [[ $? -eq 0 ]]; then
                color_pass "✔ PASS: $file"
                log_msg "✔ PASS: $file"
                ((pass_count++))
            else
                color_fail "✖ FAIL: $file"
                log_msg "✖ FAIL: $file"
                ((fail_count++))
            fi
        done < "$FILE"

        if $SUMMARY_MODE; then
            echo ""
            echo "Summary for $FILE:"
            echo "  Passed: $pass_count"
            echo "  Failed: $fail_count"
            log_msg "Summary for $FILE: Passed=$pass_count Failed=$fail_count"
        fi

    elif $UPDATE_MODE; then
        ISO_LIST=()
        for arg in "$@"; do [[ "$arg" == --* ]] && continue; ISO_LIST+=("$arg"); done
        [[ ${#ISO_LIST[@]} -eq 0 ]] && mapfile -t ISO_LIST < <(get_files)

        log_msg "🔁 Updating $FILE"
        declare -A UPDATED_LINES
        [[ -f "$FILE" ]] && while IFS= read -r line; do
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
            f="${line#*  }"
            UPDATED_LINES["$f"]="$line"
        done < "$FILE"

        for iso in "${ISO_LIST[@]}"; do
            if [[ -f "$iso" ]]; then
                new_hash=$($CMD "$iso" | awk -v f="$iso" '{print $1 "  " f}')
                UPDATED_LINES["$iso"]="$new_hash"
                echo "Updated: $iso"
                log_msg "Updated: $iso"
            else
                echo "⚠ File not found: $iso"
                log_msg "⚠ File not found: $iso"
            fi
        done

        {
            for key in "${!UPDATED_LINES[@]}"; do echo "${UPDATED_LINES[$key]}"; done | sort
            echo "# Checked: $(date '+%Y-%m-%d %H:%M:%S')"
        } > "$FILE"
        echo "✅ Updated $FILE"
        log_msg "✅ Updated $FILE"

    else
        log_msg "💾 Generating $FILE"
        declare -A EXISTING
        [[ -f "$FILE" ]] && while IFS= read -r line; do
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
            EXISTING["${line#*  }"]=1
        done < "$FILE"

        TMP_FILE=$(mktemp)
        found_any=false

        for iso in "${file_list[@]}"; do
            [[ -f "$iso" && -z "${EXISTING[$iso]}" ]] || continue
            found_any=true
            echo "Adding: $iso"
            if [[ "$hash" == "crc32" ]]; then
                $CMD "$iso" | awk -v file="$iso" '{print $1 "  " file}' >> "$TMP_FILE"
            else
                $CMD "$iso" >> "$TMP_FILE"
            fi
        done

        if $found_any; then
            cat "$TMP_FILE" >> "$FILE"
            echo "# Checked: $(date '+%Y-%m-%d %H:%M:%S')" >> "$FILE"
            echo "✅ Done writing $FILE"
            log_msg "✅ Done writing $FILE"
        else
            echo "⚠ No new files to add for $hash — skipping $FILE"
            log_msg "⚠ No new files to add for $hash — skipping $FILE"
        fi

        rm -f "$TMP_FILE"
    fi
done
